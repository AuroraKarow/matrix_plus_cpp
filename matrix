#pragma once
#include "bagrt"

// namespace

#define MTX_BEGIN                   namespace mtx {
#define MTX_END                     }

#define _MTX                        mtx::

#define MTX_PTR(TYPE, SRC)          MEM_PTR(TYPE, SRC)
#define MTX_ALLOC(TYPE, SRC, LEN)   MEM_ALLOC(TYPE, SRC, LEN)
#define MTX_INIT(TYPE, SRC, LEN)    MEM_INIT(TYPE, SRC, LEN)
#define MTX_RESET(SRC)              MEM_RECYCLE(SRC)

#define MTX_ELEM_MULT               0
#define MTX_ELEM_DIV                1
#define MTX_ELEM_POW                2

#define __mtx_elem                  arg
#define __mtx                       __mtx_elem*
#define __mtx_elem_v                = std::enable_if_t<std::is_same<__mtx_elem, bagrt::decimal>::value ||\
                                                        std::is_floating_point<__mtx_elem>::value ||\
                                                        std::is_integral<__mtx_elem>::value>
#define __mtx_elem_v_               _Ty
#define __mtx_callback              template<typename __mtx_elem>
#define __mtx_callback_             template<typename __mtx_elem, typename __mtx_elem_v_>
#define __mtx_t                     matrix<__mtx_elem, __mtx_elem_v_>
#define __mtx_callback_t            typename __mtx_t::

#include "matrix_base.h"
#include "matrix.h"

MTX_BEGIN

typedef matrix<long double>         vect;
typedef matrix<bagrt::decimal>      vect_dec;

MTX_END
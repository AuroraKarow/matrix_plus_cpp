#pragma once

#ifndef __MATRIX__
#define __MATRIX__

#include "net_decimal"
#include "async"

#define MATRIX_BEGIN        namespace neunet { namespace matrix {
#define MATRIX_END          }}

#define MATRIX_ELEM_MULT    0x0000
#define MATRIX_ELEM_DIV     0x0001
#define MATRIX_ELEM_POW     0x0002

#define MATRIX_REGSIZE      0x0004

#ifndef MATRIX_UNROLL
#define MATRIX_UNROLL       MATRIX_REGSIZE
#endif

#ifndef MATRIX_BLOCKSIZE
#define MATRIX_BLOCKSIZE 32
#endif

#define matrix_elem_t       arg
#define matrix_elem_t_v     std::is_same_v<matrix_elem_t, neunet::net_decimal> ||\
                            std::is_floating_point_v<matrix_elem_t>
#define matrix_ptr          matrix_elem_t *

#define matrices_ptr        args *

#define matrix_elem_v       = std::enable_if_t<matrix_elem_t_v>
#define matrix_elem_vn      = std::enable_if_t<matrix_elem_t_v || std::is_integral_v<matrix_elem_t>>

#define callback_matrix     template<typename matrix_elem_t, typename matrix_elem_v>
#define callback_matrix_n   template<typename matrix_elem_t, typename matrix_elem_vn>

#define callback_matrices   template<typename ... args>

#include "matrix_base.hpp"

#define matrix_elem_para    i_arg
#define matrix_elem_para_v  = std::enable_if_t<std::is_same_v<i_arg, net_decimal> ||\
                            std::is_floating_point_v<i_arg> ||\
                            std::is_integral_v<i_arg>>

#define matrix_declare      callback_matrix

#include "matrix.hpp"

NEUNET_BEGIN

typedef matrix::net_matrix<long double> vect;
typedef matrix::net_matrix<net_decimal> vect_dec;

NEUNET_END

#endif
template<typename _Ty> class net_queue
顺序表
[参数]元素类型
-函数-
net_queue(uint64_t _size = 0)
[参数]分配内存长度
[说明]构造函数
net_queue(net_queue &cpy_val)
[参数]复制源
[说明]复制构造函数
net_queue(net_queue &&mov_val)
[参数]转移源
[说明]移动构造函数
bool init(uint64_t _size = 1)
[参数]初始化分配内存长度
[说明]重新初始化
[返回]初始化成功验证
net_queue blank_queue()
[返回]空顺序表
uint64_t size()
[返回]内存长度
template<typename...Args> bool insert(uint64_t idx, Args &&...args)
[参数]插入位置, 插入值构造参数
[说明]使用构造参数插入元素到顺序表
[示例]
// 初始化10个内存长度的矩阵顺序表
net_queue<matrix> test(10);
// 初始化矩阵并插入到第2个位置
matrix elem_temp = {{1, 2},
		    {3, 4}};
test.insert(1, elem_temp);
// 直接初始化插入到第1个位置
test.insert(0, {{0, 2},
		{4, 6}});
// 此时顺序表长度为12.
[返回]插入验证
template<typename...Args> bool emplace_back(Args &&...args)
[参数]尾部插入值构造参数
[说明]使用构造参数顺序表尾部插入元素
[示例]
// 初始化10个内存长度的矩阵顺序表
net_queue<matrix> test(10);
// 直接初始化末尾插入
test.emplace_back({{0, 2},
		   {4, 6}});
// 此时顺序表长度为11.
[返回]插入验证
bool push_back(_Ty val)
[参数]尾部插入元素
[说明]顺序表尾部插入元素
[示例]
// 初始化10个内存长度的矩阵顺序表
net_queue<matrix> test(10);
// 初始化矩阵并添加至末尾
matrix elem_temp = {{1, 2},
		    {3, 4}};
test.push_back(elem_temp);
// 此时顺序表长度为11.
[返回]插入验证
template<typename... Args> net_queue<_Ty> erase(Args &&...idx)
[参数]目标位置
[说明]一次性擦除多个目标位置的元素
[示例]
// 初始化10个内存长度的整型顺序表并赋值
net_queue<int> test(10);
for(auto i=0; i<test.size(); ++i) test[i] = i;
// 擦除位置3的元素
cout << test.erase(2) << endl;
/* 打印结果为
 * [0][
 * 2
 * ]
 * 此时表长为9, 剩余元素为0, 1, 3, 4, 5, 6, 7, 8, 9
 */
// 擦除位置1, 3, 5的元素
cout << test.erase(1, 3, 5) << endl;
/* 打印结果为
 * [0][
 * 1
 * ]
 * [1][
 * 4
 * ]
 * [2][
 * 6
 * ]
 * 此时表长为6, 剩余元素为0, 3, 5, 7, 8, 9
 */
[返回]擦除位置元素顺序表
void sort(bool asc = true, std::function<bool(_Ty&, _Ty&)> _func = [](_Ty &_first, _Ty &_second){return _first > _second;})
[参数]是否升序, 排序函数
[说明]升序或降序进行排序, 排序函数定义了列表元素如何比较大小
[示例]
// 初始化10个内存长度的矩阵顺序表
net_queue<matrix> test(10);
// 升序, 按照每个矩阵的第0行第0列元素的大小排序, 较大者为升序定义.
test.sort(true, [](_Ty &_first, _Ty &_second){return _first[0][0] > _second[0][0];});
[返回]排序验证
net_queue unit(net_queue &val)
[参数]联合顺序表
[说明]联合两个顺序表
[返回]联合表
net_queue unit_union(net_queue &val)
[参数]并集顺序表
[返回]并集
net_queue unit_intersect(net_queue &val)
[参数]交集顺序表
[返回]交集
net_queue<uint64_t> find(_Ty &&target, uint64_t range_first = 0, uint64_t range_second = 0)
[参数]寻找目标元素, 寻找区间第一个区间值, 寻找区间第二个区间值
[说明]顺序表区间内寻找目标元素
[返回]返回目标所在位置的顺序表, 如果区间内无此元素返回空表
void reset()
[说明]重置顺序表
-运算符-
[]	直接访问顺序表位置, 超过长度返回空引用
==	比较两个顺序表是否相同
!=	比较两个顺序表是否不同
=	赋值

template<typename _Ty> class net_list
链表
[参数]元素类型
-函数-
uint64_t size()
[返回]链表长度
void reset()
[说明]重置链表
net_list()
[说明]空构造函数
net_list(net_list &src)
[参数]复制源
[说明]复制构造函数
net_list(net_list &&src)
[参数]转移源
[说明]移动构造函数
template<typename...args>bool insert(uint64_t idx, args &&...src)
[参数]位置, 构造插入元素参数
[说明]构造元素插入目标位置, 位置不能大于长度
[示例]
// 声明矩阵链表
net_list<matrix> test;
// 初始化矩阵并插入到第1个位置
matrix elem_temp = {{1, 2},
		    {3, 4}};
test.insert(0, elem_temp);
// 直接初始化插入到第1个位置
test.insert(0, {{0, 2},
		{4, 6}});
// 此时顺序表长度为2.
[返回]插入验证
template<typename...Args> bool emplace_back(Args &&...args)
[参数]尾部插入值构造参数
[说明]使用构造参数顺序表尾部插入元素
[示例]
// 声明矩阵链表
net_list<matrix> test;
// 直接初始化末尾插入
test.emplace_back({{0, 2},
		   {4, 6}});
// 此时顺序表长度为1.
[返回]插入验证
_Ty &erase(uint64_t idx)
[参数]擦除位置
[说明]擦除一个位置的链表元素
[返回]擦除元素
net_list unit(net_list &src)
[参数]联合链表
[说明]联合两个链表
[返回]联合表
net_list unit_union(net_list &src)
[参数]并集链表
[返回]并集
net_list unit_intersect(net_list &src)
[参数]交集链表
[返回]交集
-运算符-
[]	直接访问顺序表位置, 超过长度返回空引用
==	比较两个顺序表是否相同
!=	比较两个顺序表是否不同
=	赋值

template<typename _K, typename _V>class net_map
键值表
[参数]键类型, 值类型
net_map()
[说明]空构造函数
net_map(net_map &src)
[参数]复制源
[说明]复制构造函数
net_map(net_map &&src)
[参数]转移源
[说明]移动构造函数
void reset()
[说明]重置键值表
uint64_t find_idx(_K &&key)
[参数]目标键
[返回]目标键所在键值表的位置
net_list<_K> find_key(_V &&value)
[参数]目标值
[说明]寻找键值表中具有目标值的键
[返回]目标键链表
bool insert(_K &&key, _V &&value)
[参数]键, 值
[说明]插入键值对, 键值不能重复
[返回]插入验证
kv erase(_K &&key)
[参数]目标键
[说明]按照键擦除键值, 如果不存在目标键, 返回空值
[返回]目标键值对
kv &index(uint64_t idx)
[参数]目标位置
[返回]键值表目标位置键值对
-运算符-
[]	根据键返回值, 无目标键返回空引用
==	比较两个顺序表是否相同
!=	比较两个顺序表是否不同
=	赋值